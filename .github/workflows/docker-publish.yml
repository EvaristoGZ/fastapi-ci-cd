name: Build & Push Docker Image + Tests + Quality

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["develop"]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  quality:
    name: Lint + Format Check + Types + SAST
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache Poetry
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-py${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: poetry-${{ runner.os }}-

      - name: Install Poetry
        run: pip install "poetry==1.8.3"

      - name: Install deps (incluye dev)
        run: poetry install

      - name: Black (check only)
        run: poetry run black --check .

      - name: isort (check only)
        run: poetry run isort --check-only .

      - name: flake8
        run: poetry run flake8 .

      - name: mypy
        run: poetry run mypy app

      - name: Bandit (SAST)
        run: poetry run bandit -c .bandit -r app -f txt -o bandit-report.txt

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.txt

  tests:
    name: Tests + Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache Poetry
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-py${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: poetry-${{ runner.os }}-

      - name: Install Poetry
        run: pip install "poetry==1.8.3"

      - name: Install deps (incluye dev)
        run: poetry install

      - name: Run tests with coverage
        run: poetry run pytest

      - name: Upload coverage.xml as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

  docker:
    name: Build & Push Docker
    needs: [quality, tests]   # ‚Üê bloquea build si falla calidad o tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}